/* Rexx to perform a syntax check on COBOL program */
signal on novalue
tab_char  = '09'x
first_msgline = ''
address ISREDIT
"macro (show) NOPROCESS"
"(mem) = member"
"(dsn) = dataset"
address ISPEXEC
"vget (cicsload pvsyns1 pvsyns2 pvsyns3 pvsyns4 pvsyns5 pvsyns6 pvsynd1",
 "pvsynd2 pvsynd3 pvsynd4 pvsynd5 pvsynd6 cics db2 viewlist cobcomp) PROFILE"
if show <> '' then
 do
  'display panel(syntax)'
  "vput (cicsload pvsyns1 pvsyns2 pvsyns3 pvsyns4 pvsyns5 pvsyns6 pvsynd1",
   "pvsynd2 pvsynd3 pvsynd4 pvsynd5 pvsynd6 cics db2 viewlist cobcomp) PROFILE"
 end
address TSO
call free_em
"alloc fi(sysin) da('"dsn"("mem")') shr"
syslibs = ''
do i = 1 to 6
 interpret "tempval = pvsyns" || i
 if tempval <> '' then
  if syslibs <> '' then
   syslibs = syslibs',' "'"tempval"'"
  else
   syslibs = "'"tempval"'"
end

"alloc fi(syspunch) dummy"
"alloc fi(syslin) dummy"
do i = 1 to 15
 "alloc fi(sysut"i") new space(2 2) CYL"
end
"alloc fi(sysmdeck) new space(2 2) CYL"
"alloc fi(sysprint) new cyl space(5 5)"
parms = 'NOTERM,NONUM,LC(0)'   /* NONUMBER, LINECOUNT(0) */
if translate(cics) = 'Y' then
 do
  parms = parms',CICS'
  "STEPLIB ALLOCATE DATASETS('"cicsload"') SHR NOMSGS" /* CBTTAPE file 452 */
 end
if translate(db2)  = 'Y' then
 do
   do i = 1 to 6
    interpret "tempval = pvsynd" || i
    if tempval <> '' then
     if syslibs <> '' then
      syslibs = syslibs',' "'"tempval"'"
     else
      syslibs = "'"tempval"'"
   end
   parms = parms',SQL'
   junkdbrmlib = userid()'.dbrmjunk'
   "alloc fi(junk) new catalog da('"junkdbrmlib"') recfm(f b) lrecl(80)",
     "tracks space(1,1) dir(1) dsorg(PO)"
   "alloc fi(DBRMLIB) da('"junkdbrmlib"(junk)') shr"
 end
if syslibs <> '' then
 "alloc fi(syslib) da("syslibs") shr"

"CALL '"COBCOMP"(IGYCRCTL)' '"parms"'"

if translate(db2)  = 'Y' then
 do
  shhh = msg('OFF')
  "delete '"junkdbrmlib"'"
  talk = msg('ON')
 end
if translate(cics) = 'Y' then
 "STEPLIB FREE NOMSGS"   /* CBTTAPE file 452 */
if viewlist = 'Y' then
 do
  address ISPEXEC
  "lminit dataid(dataid) ddname(sysprint) enq(shr)"
  "view dataid("dataid")"
  "lmfree dataid(dataid)"
 end
address TSO
"execio * diskr sysprint (stem in. finis)"
call free_em
address ISREDIT
errors = 0
offset = 0
inMessages = 0
do i = 1 to in.0
 if substr(in.i,10,2) == 'C ' | substr(in.i,10,2) == 'C*' then
  call process_copybook_line
 parse var in.i '==> IGY' rest
 if rest <> '' then
  call process_message
 if in.i = 'LineID  Message code  Message text' then
  inMessages = 1
 if in.i = '-Messages    Total    Informational    Warning    Error' then
  inMessages = 0
 if inMessages then
  do
   parse var in.i lineID rest
   if datatype(lineID)  = 'NUM' then
    do
     rest = wordwrapper(rest, 70)
     parse var rest first (tab_char) second
     "(zlast) = linenum .zlast"
     if second <> '' then
       "line_after" zlast "= msgline (second)"
     "line_after" zlast "= msgline (first)"
    end
  end
end
if errors = 0 then
 do
  note = 'No errors found'
  "line_after 0 = noteline (note)"
  "l 0"
 end
else
 do
  "locate" first_msgline
  "up 3"
 end
exit

free_em:
address TSO
shhh = msg('OFF')
"free fi(sysut1 sysut2 sysut3 sysut4 sysut5 sysut6 sysut7 sysut8 sysut9",
        "sysut10 sysut11 sysut12 sysut13 sysut14 sysut15 sysmdeck sysprint",
        "syslin syspunch sysin syslib dbrmlib junk)"
talk = msg('ON')
return

process_copybook_line:
 offset = offset + 1  /* cater for the extra line */
 copybook = substr(in.i,19)
 parse var in.i 4 linenum 10 .
 "line_before" linenum - offset "= noteline (copybook)"
return

process_message:
 errors = errors + 1
 rest = strip(substr(in.i,13))
 /* cater for multi-line message */
 j = i + 1
 if left(in.j, 25) = ' ' & substr(in.j, 26) <> ' ' then /* msg continues */
  do
   rest = rest strip(in.j)
   j = j + 1
   if left(in.j, 25) = ' ' & substr(in.j, 26) <> ' ' then /* msg continues */
    rest = rest strip(in.j)
  end
 rest = strip(rest)
 parse var in.i linenum junk
 linenum = substr(linenum,3,6) /* ==002900==>  -> 000029 */
 rest = wordwrapper(rest, 70)
 parse var rest first (tab_char) second
 if second <> '' then
   "line_after" linenum - offset "= msgline (second)"
 "line_after" linenum - offset "= msgline (first)"
 if first_msgline = '' then
  first_msgline = linenum - offset
return

wordwrapper:
parse arg wrapme, here
if length(wrapme) < here then
 return wrapme
else
 do
  lastSpace = lastpos(' ',left(wrapme,here))
  return left(wrapme,lastSpace) || tab_char || ,
         copies(' ',11) substr(wrapme,lastSpace + 1)
 end
